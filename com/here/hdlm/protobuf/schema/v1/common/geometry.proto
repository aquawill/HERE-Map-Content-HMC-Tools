syntax = "proto3";
package com.here.hdlm.protobuf.schema.v1.common;

// Geometry definitions, size optimized for external format

// Represents a 2D point
message Point2d {
    sint64 here_2d_coordinate = 1;
    sint32 z_level_index = 2;
}

// Represents a 3D point
message Point3d {
    sint64 here_2d_coordinate = 1;
    //sint32 cm_from_WGS84_ellipsoid = 2;
    sint32 cm_from_wgs84_ellipsoid = 2;
}

// Represents a 2D polyline using point offset encoding
message LineString2dOffset {

    // Lat/long offsets encoded from the previous entry and for the first entry, the tile centerpoint
    repeated sint64 here_2d_coordinate_diffs = 1 [packed=true];

    // Not offset encoded
    repeated sint32 z_level_indexes = 2 [packed=true];
}

// Represents a 3D polyline using point and elevation offset encoding
message LineString3dOffset {

    // Lat/long offsets encoded from the previous entry and for the first entry, the tile centerpoint
    repeated sint64 here_2d_coordinate_diffs = 1 [packed=true];

    // Elevation offsets encoded from the previous entry and for the first entry, the tile centerpoint
    repeated sint32 cm_from_wgs84_ellipsoid_diffs = 2 [packed=true];
}

// Container for elevation measure in centimeters from the WGS84 ellipsoid
// Can be inlined when not nullable
message ElevationMeasure {
    sint32 cm_from_wgs84_ellipsoid = 1;
}

// Container for vertical stacking of points in the current location
// Can be inlined when not nullable
message ZLevelIndex {
    sint32 index = 1;
}

// Vertical 3D Rectangle mainly used to represent signs
message OrientedRectangle3d {

    // The center point of the Oriented Rectangle which includes latitude, longitude, and elevation in cm.
    Point3d center_point = 1;

    // Height of the Oriented Rectangle in centimeters
    uint32 height_in_cm = 2;

    // Width of the Oriented Rectangle in centimeters
    uint32 width_in_cm = 3;

    // The bearing in degrees of where the Oriented Rectangle faces relative to true North in clockwise direction.
    uint32 bearing_in_degrees = 4;
}

// Represents a vertical 3D polygon
message VerticalSurface {
    // Represents the points that comprise the lower edge of the polygon, ordered from the leftmost point to rightmost, relative to an observer viewing the front face of the surface.
    LineString3dOffset bottom = 1;

    // The elevation in centimeters of the top edge of the polygon, relative to points on the lower edge's geometry.
    // Missing index values assume the previous point's elevation.
    // Additional redundant shape points are introduced to the bottom geometry to allow for all required top edge points.
    repeated RelativePointHeight relative_upper_point_heights = 2;
}

message RelativePointHeight {
    // Base-1 index into the related parent geometry LineString points.
    uint32 related_point_number = 1;

    // Relative altitude increase for this top point measured from the altitude of the related point.
    uint32 centimeters_above_related_point = 2;
}

// Oriented 3D Rectangle represented as four 3D points
message OrientedRectangularSurface {
    // Four 3D points that represent the Oriented Rectangular surface.
    // The front face of the rectangle is the face of the surface in which the points are counter-clockwise ordered.
    repeated Point3d rectangle_points = 1;
}