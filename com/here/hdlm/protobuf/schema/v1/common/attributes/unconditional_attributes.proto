syntax = "proto3";
package com.here.hdlm.protobuf.schema.v1.common.attributes;

// Defines a reference to a HERE Core Map feature
message CoreMapReference {
    uint32 pvid = 1;
    uint32 here_tile_id = 2;
}

// Defines the extent of the road for which a posted Variable Speed Sign is applicable
message VariableSpeedLimit {

    // The Variable Speed Sign this speed limit is displayed on
    string variable_speed_sign_id = 1;
}

// Define locations for the receipt of traffic messages
message TrafficMessageChannelCode {

    // Up to 5 digit identifier of the problem location
    uint32 location_code = 1;

    // Indicates disposition of the specific incident relative to the location
    LocationDisposition location_disposition = 2;

    enum LocationDisposition {
        LOCATION_DISPOSITION_UNKNOWN = 0;
        EXTERNAL_POSITIVE_DIRECTION = 1;	// Towards the next location. Mapped from "+"
        EXTERNAL_NEGATIVE_DIRECTION = 2;	// Towards the previous location. Mapped from "-"
        INTERNAL_POSITIVE_DIRECTION = 3;	// Towards the next location. Mapped from "P"
        INTERNAL_NEGATIVE_DIRECTION = 4;	// Towards the previous location. Mapped from "N"
    }

    // 2 digit identifier of the problem location code definition table
    uint32 location_table_number = 3;

    // A single character country code. Note 1 = USA, C = Canada.
    string ebu_country_code = 4;

}

// Indicates the location of a typically automated sign where the posted speed limit can vary.
message VariableSpeedSign {

    // Variable speed sign globally unique id.
    // Used to link to variable speed limits
    string variable_speed_sign_id = 1;

    SignLocation sign_location = 2;

    enum SignLocation {
        SIGN_LOCATION_UNKNOWN = 0;
        LEFT = 1;
        RIGHT = 2;
        OVERHEAD = 3;
    }

}

// Used to indicate whether a driver will perceive the situation as a single intersection.
message ComplexIntersection {
    IntersectionCategory intersection_category = 1;

    enum IntersectionCategory {
        COMPLEX_INTERSECTION_UNKNOWN = 0;
        INTERSECTION_INTERNAL = 1;
        MANOEUVRE = 2;
        INDESCRIBABLE = 3;
        ROUNDABOUT = 4;
        UNDEFINED_TRAFFIC_INTERNAL = 5;
        SPECIAL_TRAFFIC_FIGURE = 6;
    }
}

// Hierarchical classification of the road network
enum FunctionalClass {
    FUNCTIONAL_CLASS_UNKNOWN = 0;
    FC_1 = 1; // allow for high volume, maximum speed traffic movement between major metropolitan areas.
    FC_2 = 2; // allow for high volume, high speed traffic movement between metropolitan areas and major cities.
    FC_3 = 3; // allow for high volume traffic movement at a lower level of mobility than Functional Class(Level 2) roads.
    FC_4 = 4; // allow for high volume traffic movement at a moderate speed between additional neighborhoods/cities. These roads connect the Functional Class(Level 5) roads to the higher Functional Class network.
    FC_5 = 5; // all roads and walkways not coded with Functional Class (Level 1-4).
}

// Classifies the general speed trend of a road based on posted or implied speed limit.
enum SpeedCategory {
    SPEED_CATEGORY_UNKNOWN 		= 0;
    OVER_130_KMPH__80_MPH      	= 1;
    BTW_101_130_KMPH__65_80_MPH = 2;
    BTW_91_100_KMPH__55_64_MPH  = 3;
    BTW_71_90_KMPH__41_54_MPH   = 4;
    BTW_51_70_KMPH__31_40_MPH   = 5;
    BTW_31_50_KMPH__21_30_MPH   = 6;
    BTW_11_30_KMPH__6_20_MPH    = 7;
    UNDER_11_KMPH__6_MPH       	= 8;
}

// Indicates whether a road is inside a built-up area or not, which is primarily identified by
// the built-up area signs.
message BuiltUpAreaRoad {
    bool is_built_up_area_road = 1;
    bool is_verified = 2;
}


// Identifies a physical structure or painted road marking intended to
// legally prohibit left turns in right-side driving countries, right turns in left-side driving
// countries, and U-turns at divided intersections or in the middle of divided links
message RoadDivider {

    RoadDividerType divider_type = 1;

    enum RoadDividerType {
        ROAD_DIVIDER_TYPE_UNKNOWN = 0;
        LEGAL = 1;
        PHYSICAL = 2;
    }

    IntersectionsAffected applies_to_intersection = 2;

    enum IntersectionsAffected {
        INTERSECTIONS_AFFECTED_NONE = 0;
        START = 1;
        END = 2;
        BOTH = 3;
    }

}

message RoadIdentifiers {
    RouteType route_type = 1;

    enum RouteType {
        ROUTE_TYPE_UNKNOWN = 0;
        LEVEL_1_ROAD = 1;
        LEVEL_2_ROAD = 2;
        LEVEL_3_ROAD = 3;
        LEVEL_4_ROAD = 4;
        LEVEL_5_ROAD = 5;
        LEVEL_6_ROAD = 6;
    }
}

//Link oriented point attribute identifying the location of a vehicle checkpoint (e.g. border crossing) or physical toll structure.
message VehicleCheckpoint {
    bool is_toll_structure = 1;
}

//Link oriented point attribute identifying the location of a traffic signal.  No other attribute data is included at this time
message TrafficSignal {

}